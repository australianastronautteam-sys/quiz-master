contexts:
  - name: Node.js Backend Best Practices
    type: ruleset
    description: Enforce Node.js backend coding conventions and best practices
    applies_to:
      repos: ["australianastronautteam-sys/quiz-master"] # replace with your GitHub repo
      patterns: ["src/**/*.js"]
    rules:
      - "Use async/await instead of raw promises when possible"
      - "Always handle errors in async functions"
      - "Do not commit secrets or API keys"
      - "Use environment variables for configuration"
      - "Follow consistent file naming (camelCase for files and functions)"
      - "Use try/catch for all service calls that can fail"
      - "Middleware should call next() properly"

  - name: Quiz Routes & Logic
    type: custom
    description: Specific rules for quiz routes and services
    applies_to:
      patterns: ["src/routes/**/*.js", "src/services/**/*.js"]
    details: |
      - All quiz endpoints must validate user input
      - Responses should always include a success flag and message
      - Errors should return proper HTTP status codes
      - No direct file access from routes; use the upload service
      - Gemini and parser services should be pure functions without side effects

  - name: Formatter & Utils
    type: ruleset
    description: Ensure utilities follow coding style
    applies_to:
      patterns: ["src/utils/**/*.js"]
    rules:
      - "Keep utility functions pure"
      - "Include JSDoc comments for all functions"
      - "Do not mutate input objects directly"

  - name: Upload Middleware
    type: custom
    applies_to:
      patterns: ["src/middleware/upload.js"]
    details: |
      - Validate file type and size
      - Store uploads only in the 'uploads' folder
      - Return consistent error messages for invalid uploads
